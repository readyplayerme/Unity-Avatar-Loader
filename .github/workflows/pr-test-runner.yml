name: PR test runner

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, reopened ]

jobs:
  runAllTests:
    name: ${{ matrix.unityVersion }} ${{ matrix.testMode }} tests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2020.3.0f1
    steps:
      - name: Checkout Unity-SDK Repository
        uses: actions/checkout@v3
        with:
          repository: "readyplayerme/Unity-SDK"
          submodules: true
          fetch-depth: 0
          ref: develop
          token: ${{ secrets.DEV_SDK_TOKEN }}
      - name: Checkout submodule branch
        run: |
          cd ${{ secrets.AVATAR_LOADER_PATH }}
          git status
          git fetch -a
          git checkout ${{ github.event.pull_request.head.ref }}
          git pull origin ${{ github.event.pull_request.head.ref }}
    
      - name: Cache Project
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

#      - name: Run Tests
#        uses: game-ci/unity-test-runner@v2
#        env:
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
#        with:
#          unityVersion: ${{ matrix.unityVersion }}
#          testMode: ${{ matrix.testMode }}
#          projectPath: ${{ matrix.projectPath }}
#          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} tests result
#          githubToken: ${{ secrets.GITHUB_TOKEN }}
#          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*"

      - name: Setup python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
         pip install numpy
      - name: Parse performance report
        id: parser
        run: |
         pwd
         ls
         cd Scripts
         python PerformanceDataParser.py
      
      - name: Print output
        run: echo "${{ steps.parser.outputs.report }}" 
        
      - uses: mshick/add-pr-comment@v2
        with:
          message: "${{ steps.parser.outputs.report }}" 
